 -----
 Introduction
 -----
 Dave W.
 -----
 2010-06-12
 -----

Overview

	Plugging the ResourceRequestStats tool into your web application allows you to track requests for HTTP application
	resources.  By tracking that usage information, you can discover which which resources are most popular and which 
	users make heaviest use of the application.

Usage
	
* ResourceRequestStatsTrackerFilter	
	
	Adding the ResourceRequestStats tool to your web application is as simple as adding a Filter declaration to your
	application's deployment descriptor.  Following is an example that tracks all requests for JSP pages.
	
+-----+	
<!-- web.xml snippet -->

<filter>
	<filter-name>ResourceRequestStatsTrackerFilter</filter-name>
	<filter-class>net.big_oh.resourcestats.web.filter.ResourceRequestStatsTrackerFilter</filter-class>
</filter>

<filter-mapping>
	<filter-name>ResourceRequestStatsTrackerFilter</filter-name>
	<url-pattern>*.jsp</url-pattern>
</filter-mapping>
+-----+	

* Hibernate Configuration

	Once configured, the ResourceRequestStatsTrackerFilter will use Hibernate to persist data to the database of your choice.
	
+-----+
<!-- hibernate.cfg.xml snippet -->

<hibernate-configuration>
    <session-factory>
    
        ...

		<!--  Add mapping files for all entities  -->
		<mapping resource="Resource.hbm.xml" />
		<mapping resource="ResourceRequest.hbm.xml" />
		<mapping resource="Requestor.hbm.xml" />
		
		...
		
    </session-factory>
</hibernate-configuration>
+-----+	

* Second-Level Cache

	Performance-critical web applications should also enable second-level caching for immutable domain model objects.
	
+-----+
<!-- hibernate.cfg.xml snippet -->

<hibernate-configuration>
    <session-factory>
    
        ...

		<!-- Enable the second-level cache  -->
		<property name="cache.provider_class">org.hibernate.cache.EhCacheProvider</property>
		<property name="cache.use_second_level_cache">true</property> 
		
		<!--  Configure caching for some immutable objects -->
		<class-cache usage="read-only" class="net.big_oh.resourcestats.domain.Requestor"/>
		<class-cache usage="read-only" class="net.big_oh.resourcestats.domain.Resource"/>
		
		...
		
    </session-factory>
</hibernate-configuration>
+-----+	

~~ TODO Need to implement and document SessionFactory injection with Spring.

+-----+	
<!-- ehcache.xml snippet -->

<!-- There are potentially many thousands of Requestors, each of which is immutable. -->    
<cache name="net.big_oh.resourcestats.domain.Requestor"
    maxElementsInMemory="5000"
    eternal="false"
    timeToIdleSeconds="300"
    timeToLiveSeconds="300"
    overflowToDisk="false"
    />
    
<!-- There are relatively few Resources, each of which is immutable. -->        
<cache name="net.big_oh.resourcestats.domain.Resource"
    maxElementsInMemory="1000"
    eternal="true"
    timeToIdleSeconds="0"
    timeToLiveSeconds="0"
    overflowToDisk="false"
    />
+-----+	

* Querying Resource Statistics

	Once properly configured, you can extract historical resource request details using the project's DAOs.  For example ...
	
+-----+	
DAOFactory.getResourceDAO().getMostPopularResources(limit)
+-----+	

~~See also http://maven.apache.org/doxia/references/apt-format.html for a tutorial on the APT document format.