<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<parent>
		<artifactId>AbstractBasePom</artifactId>
		<groupId>net.big_oh</groupId>
		<version>1.0</version>
	</parent>

	<groupId>net.big_oh</groupId>
	<artifactId>BigOhSoftwareBasePom</artifactId>
	<packaging>pom</packaging>
	<name>BigOhSoftware Base POM</name>
	<description>This POM project extends the abstract base POM to apply some BigOhSoftware related values.</description>
	<inceptionYear>2008</inceptionYear>
	<url>http://www.big-oh.net/</url>

	<!-- Organization details for Big-Oh Software -->
	<organization>
		<name>Big-Oh Software</name>
		<url>http://www.big-oh.net/</url>
	</organization>

	<!-- Developer listing for Big-Oh Software -->
	<developers>
		<developer>
			<id>Dave W.</id>
			<name>Dave W.</name>
			<email>bigohsoftware at gmail dot com</email>
			<url>http://www.big-oh.net/contact.jsp</url>
			<organization>Big-Oh Software</organization>
			<organizationUrl>http://www.big-oh.net/</organizationUrl>
			<roles>
				<role>Developer</role>
				<role>Architect</role>
			</roles>
		</developer>
	</developers>

	<!-- Default license used by Big-Oh Software -->
	<licenses>
		<license>
			<name>Big-Oh Software's MIT-style License</name>
			<url>http://www.big-oh.net/license.jsp</url>
			<comments>The crux of that license is that, while Big-Oh Software retains a copyright on the code, you may freely use it in your projects.</comments>
		</license>
	</licenses>
	
	<!-- Source control management details -->
	<scm>
		<connection>scm:svn:http://big-oh.googlecode.com/svn/trunk/</connection>
		<developerConnection>scm:svn:https://big-oh.googlecode.com/svn/trunk/</developerConnection>
		<url>https://code.google.com/p/big-oh/source/browse/#svn/trunk</url>
	</scm>
	
	<!-- Issue tracking details -->
	<issueManagement>
		<system>GoogleCode</system>
        <url>http://code.google.com/p/big-oh/issues/list</url>
	</issueManagement>
	
	<!-- Define non-standard repositories required to build these Big-Oh Software projects -->
	<repositories>
		<!-- Support resolution of wagon-svn from java.net -->
		<repository>
			<id>maven2-repository.dev.java.net</id>
			<name>Java.net Repository for Maven</name>
			<url>http://download.java.net/maven/2/</url>
		</repository>
	</repositories>

	<!-- Define sites & repositories to which build artifacts will be deployed  -->
	<distributionManagement>
		<!--
			Credentials for distribution sites are typically defined in settings.xml
			See also http://maven.apache.org/settings.html#Simple_Values
		 -->
		<site>
			<id>big-oh.code.google</id>
			<name>Big-Oh Software's Google Code Site Directory</name>
			<url>svn:https://big-oh.googlecode.com/svn/site/</url>
		</site>
		<repository>
			<id>big-oh.code.google</id>
			<name>Big-Oh Software's Google Code Artifact Repository</name>
			<url>dav:https://big-oh.googlecode.com/svn/repos/releases/</url>
		</repository>
		<snapshotRepository>
			<id>big-oh.code.google</id>
			<name>Big-Oh Software's Google Code Snapshots Artifact Repository</name>
			<url>dav:https://big-oh.googlecode.com/svn/repos/snapshots/</url>
		</snapshotRepository>
	</distributionManagement>

	<build>

		<!-- Define additional plugin _preferences_ for all BigOhSoftware projects -->
		<pluginManagement>
			<plugins>
				<!-- Set Java compilation target version -->
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-compiler-plugin</artifactId>
					<configuration>
						<source>${compileSource}</source>
						<target>${compileTarget}</target>
					</configuration>
				</plugin>
				<!-- Configure the release plugin behavior -->
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-release-plugin</artifactId>
					<configuration>
						<tagBase>https://big-oh.googlecode.com/svn/tags</tagBase>
						<scmCommentPrefix>Maven release plugin --</scmCommentPrefix>
					</configuration>
				</plugin>
			</plugins>

		</pluginManagement>

		<!-- Define additional plugin _executions_ for all BigOhSoftware projects -->
		<plugins>
			<!-- 
				Attach a code coverage check to the verify phase 
				See also http://mojo.codehaus.org/cobertura-maven-plugin/index.html
			-->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>cobertura-maven-plugin</artifactId>
				<executions>
					<execution>
						<phase>verify</phase>
						<goals>
							<goal>clean</goal>
							<goal>check</goal>
						</goals>
					</execution>
				</executions>
				<!-- 
					Note that this configuration must be done here, not in the customary pluginManagement section
					See also http://mojo.codehaus.org/cobertura-maven-plugin/usage.html
				-->
				<configuration>
					<check>
						<haltOnFailure>true</haltOnFailure>
						<branchRate>${codeCoverageFailureThreshold}</branchRate>
						<lineRate>${codeCoverageFailureThreshold}</lineRate>
						<totalBranchRate>${codeCoverageFailureThreshold}</totalBranchRate>
						<totalLineRate>${codeCoverageFailureThreshold}</totalLineRate>
						<packageLineRate>${codeCoverageFailureThreshold}</packageLineRate>
						<packageBranchRate>${codeCoverageFailureThreshold}</packageBranchRate>
					</check>
				</configuration>
			</plugin>
		</plugins>

		<extensions>
			<!-- Include wagon extension that supports deployment of Maven site to SVN -->
			<extension>
				<groupId>org.jvnet.wagon-svn</groupId>
				<artifactId>wagon-svn</artifactId>
				<version>1.8</version>
			</extension>
		</extensions>

	</build>

	<reporting>

		<!-- Define additional reporting plugins for all BigOhSoftware projects -->

		<!-- All plugins defined in this section should list explicit versions ... see the flame war at http://jira.codehaus.org/browse/MPIR-195 -->

		<plugins>
			<!-- Include a copy of the source code in the site -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jxr-plugin</artifactId>
				<version>2.2</version>
			</plugin>
			<!-- Report on jUnit executions -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-report-plugin</artifactId>
				<version>2.5</version>
			</plugin>
			<!-- 
				Report on jUnit coverage for the project 
				See also http://mojo.codehaus.org/cobertura-maven-plugin/index.html
			-->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>cobertura-maven-plugin</artifactId>
				<version>2.4</version>
				<configuration>
					<quiet>true</quiet>
				</configuration>
			</plugin>
			<!-- Report on code quality (and check for code clones) -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-pmd-plugin</artifactId>
				<version>2.5</version>
				<configuration>
					<targetJdk>${compileSource}</targetJdk>
				</configuration>
			</plugin>
			<!-- Report on change history for the project -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-changes-plugin</artifactId>
				<version>2.3</version>
				<reportSets>
					<reportSet>
						<reports>
							<report>changes-report</report>
						</reports>
					</reportSet>
				</reportSets>
			</plugin>
			<!-- Report on "TODO" tags -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>taglist-maven-plugin</artifactId>
				<version>2.4</version>
			</plugin>
		</plugins>

	</reporting>

	<properties>
		<compileSource>1.5</compileSource>
		<compileTarget>1.5</compileTarget>
		<!-- TODO Work towards mandating a higher default level of test coverage in all modules -->
		<codeCoverageFailureThreshold>0</codeCoverageFailureThreshold>
	</properties>

</project>